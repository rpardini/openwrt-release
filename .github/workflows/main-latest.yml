name: main-latest

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions: write-all # just let it do everything

jobs:

  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare release ID
        id: prep
        run: |
          echo "created=$(date -u +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"
    outputs:
      created: ${{ steps.prep.outputs.created }} # refer to as ${{needs.prepare.outputs.created}}

  build:
    needs: [ prepare ]
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        include:
          - { id: 'r5s', branch: "r5s", config: "diffconfig.r5s.final",  runner: "ubuntu-latest", cache_id: "rockchip", git_url: "https://github.com/rpardini/openwrt.git" }
          # declare REMOTE_SHA1=$(git ls-remote "https://github.com/rpardini/openwrt.git" "r5s" | awk '{ print $1 }'); docker build --build-arg=OPENWRT_GIT_URL=https://github.com/rpardini/openwrt.git --build-arg=OPENWRT_BRANCH=r5s --build-arg=OPENWRT_REVISION=$REMOTE_SHA1 --build-arg=OPENWRT_CONFIG=diffconfig.r5s.final -t openwrt:r5s .
    steps:
      - name: cleanup GHA hosted runner (${{ matrix.runner }})
        if: ${{ matrix.runner == 'ubuntu-latest' }} # only for hosted runners
        run: |
          # Workaround to provide additional free space for building. https://github.com/actions/virtual-environments/issues/2840
          set -x
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: "Checkout ${{ matrix.git_url }} at ${{ matrix.branch }}"
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.git_url }}
          ref: ${{ matrix.branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Obtain the revision of checked out branch
        id: gitinfo
        run: |
          # get the SHA1 of actions/checkout above
          declare -r SHA1="$(git rev-parse HEAD)"
          echo "The local sha1 is: ${SHA1}"
          echo "sha1=${SHA1}" >> "$GITHUB_OUTPUT"

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # github username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # github actions builtin token. repo has to have pkg access.

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.id }} ${{ matrix.branch }} ${{ matrix.config}}
        uses: docker/build-push-action@v6
        with:
          #target: # unset, builds the final stage
          load: true # load the final stage, which is just alpine with the built artifacts
          context: .
          file: ./Dockerfile # not local to this repo -- see actions/checkout above
          pull: false # don't pull.
          push: false # don't push, load is enough
          tags: ${{ matrix.id }}-build-image:${{ matrix.id }}
          # caching's not worth the trouble and compression/transmit/decompression time
          #cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:cache-${{ matrix.cache_id }} # REGISTRY caching
          #cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:cache-${{ matrix.cache_id }},mode=max # mode=max "export all the layers of all intermediate steps"
          build-args: |
            OPENWRT_GIT_URL=${{ matrix.git_url }}
            OPENWRT_BRANCH=${{ matrix.branch }}
            RELEASE_ID=${{matrix.id}}
            OPENWRT_REVISION=${{ steps.gitinfo.outputs.sha1 }}
            OPENWRT_CONFIG=${{ matrix.config }}
            RELEASE_VERSION=${{needs.prepare.outputs.created}}

      - name: Extract artifacts from docker ${{ matrix.id }} ${{ matrix.branch }} ${{ matrix.config}}
        run: docker cp $(docker create --rm ${{ matrix.id }}-build-image:${{ matrix.id }}):/out ./

      # Release the artifacts into GitHub Releases
      - name: Release ${{ matrix.id }} ${{ matrix.branch }} ${{ matrix.config}}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{needs.prepare.outputs.created}}-${{ matrix.id }}"
          prerelease: false
          title: "${{ matrix.id }} - ${{needs.prepare.outputs.created}}"
          files: |
            out/*
